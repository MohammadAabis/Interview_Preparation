1- Pillars of OOP ?

--> Encapsulation: Binding data (variables) and code (methods) together, and keeping internal details hidden from outside access.
It is used to:
Protect sensitive data.
Prevent direct modification.
Maintain control via methods.

Example: Think of a bank account you can deposit or withdraw money, but you can’t directly change the account balance.

--> Abstraction: Hiding complex implementation details and showing only what’s necessary.
You don’t care how the email is sent, just that the function works.

--> Polymorphism: Same method name but behaves differently depending on the object or input.

Example: The action “makeSound()” mean Dog class implement it "Bark" and Cat class implement it "Meow".

--> Inheritance: Mechanism where one class (child) inherits properties & methods from another (parent).
Types are:
Single:	One child inherits from one parent like (Dog → Animal).
Multilevel:	Chain of inheritance from child to it's parent and then GrandParent like(Puppy → Dog → Animal).
Hierarchical: Multiple children share one parent like(Cat, Dog → Animal).
Multiple: One class can have more than one superclass and inherit features from all parent classes. It is not supported in Java and JS, to achieve this we implement Interface.

2- Abstract Class ?

A class that cannot be instantiated directly. Its primary purpose is to serve as a blueprint or base class for other classes, establishing a common interface and potentially providing some default implementations for derived classes.

For example, we make Abstract class and make empty function like startHours(). Now, different department extend it and implement that function according to them.

3- Interface ?

It only defines what methods or properties must exist, but provides no implementation. It’s like a promise that any class implementing it must fulfill.

4- Abstract vs Interface ?

--> Abstract: 
It can have Abstract(empty method) or concrete(implemented) methods.
It Cannot be instantiated.
Class can extend only one abstract class.
Can have a constructor.

--> Interface:
It can only have methods or property declaration.
It Cannot be instantiated.
Class can implement multiple interfaces.
No constructor.

5- What’s difference between composition and inheritance?

Inheritance → “is-a” relationship (Dog is an Animal).
Composition → “has-a” relationship (Car has an Engine).

6- What is method overriding vs overloading?

--> Overriding:	When a child (subclass) provides its own implementation of a method that already exists in the parent (superclass).
Same method name.
Same parameters.
Different behavior (defined in child class).
Happens in inheritance.

--> Overloading: When multiple methods in the same class share the same name, but have different numbers or types of parameters.
Same name.
Different parameter lists.
Happens in compile time (in strongly typed languages like Java, C++).
JavaScript doesn’t natively support overloading but you can simulate it.

7- Access modifiers ?

- Private:
Accessible only inside the same class.

- Protected:
Inside same package.
In subclasses (even in different package).

- Public:
Can access from anywhere.